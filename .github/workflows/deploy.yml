name: Deploy to ECS Fargate

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 739275478105.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPO_BACKEND: backend
  ECR_REPO_ADMIN: admin
  ECR_REPO_STOREFRONT: storefront
  ECS_CLUSTER: medusa-cluster
  ECS_SERVICE_BACKEND: backend-service
  ECS_SERVICE_ADMIN: admin-service
  ECS_SERVICE_STOREFRONT: storefront-service
  SUBNETS: subnet-04fd156206a709997,subnet-0eb5ce8c43716be97,subnet-0458b373ada72ad8e,subnet-00bedb1932d937f7b
  SECURITY_GROUP: sg-064b066520ecc7e59

jobs:
  deploy:
    name: Build & Deploy Containers
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::739275478105:role/github-actions-ecs-deploy-role
          role-session-name: github-actions-session
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push Images
        run: |
          docker build -t $ECR_REPO_BACKEND ./backend
          docker tag $ECR_REPO_BACKEND:latest $ECR_REGISTRY/$ECR_REPO_BACKEND:latest
          docker push $ECR_REGISTRY/$ECR_REPO_BACKEND:latest

          docker build -t $ECR_REPO_ADMIN ./admin
          docker tag $ECR_REPO_ADMIN:latest $ECR_REGISTRY/$ECR_REPO_ADMIN:latest
          docker push $ECR_REGISTRY/$ECR_REPO_ADMIN:latest

          docker build -t $ECR_REPO_STOREFRONT ./storefront
          docker tag $ECR_REPO_STOREFRONT:latest $ECR_REGISTRY/$ECR_REPO_STOREFRONT:latest
          docker push $ECR_REGISTRY/$ECR_REPO_STOREFRONT:latest

      - name: Register Task Definitions
        run: |
          BACKEND_TASK=$(aws ecs register-task-definition \
            --family backend-task-def \
            --requires-compatibilities FARGATE \
            --network-mode awsvpc \
            --cpu "256" --memory "512" \
            --execution-role-arn arn:aws:iam::739275478105:role/ecsTaskExecutionRole \
            --container-definitions "[{
              \"name\": \"backend\",
              \"image\": \"${ECR_REGISTRY}/${ECR_REPO_BACKEND}:latest\",
              \"essential\": true,
              \"portMappings\": [{ \"containerPort\": 9000, \"hostPort\": 9000, \"protocol\": \"tcp\" }]
            }]" --query 'taskDefinition.taskDefinitionArn' --output text)

          ADMIN_TASK=$(aws ecs register-task-definition \
            --family admin-task-def \
            --requires-compatibilities FARGATE \
            --network-mode awsvpc \
            --cpu "256" --memory "512" \
            --execution-role-arn arn:aws:iam::739275478105:role/ecsTaskExecutionRole \
            --container-definitions "[{
              \"name\": \"admin\",
              \"image\": \"${ECR_REGISTRY}/${ECR_REPO_ADMIN}:latest\",
              \"essential\": true,
              \"portMappings\": [{ \"containerPort\": 7000, \"hostPort\": 7000, \"protocol\": \"tcp\" }]
            }]" --query 'taskDefinition.taskDefinitionArn' --output text)

          STOREFRONT_TASK=$(aws ecs register-task-definition \
            --family storefront-task-def \
            --requires-compatibilities FARGATE \
            --network-mode awsvpc \
            --cpu "256" --memory "512" \
            --execution-role-arn arn:aws:iam::739275478105:role/ecsTaskExecutionRole \
            --container-definitions "[{
              \"name\": \"storefront\",
              \"image\": \"${ECR_REGISTRY}/${ECR_REPO_STOREFRONT}:latest\",
              \"essential\": true,
              \"portMappings\": [{ \"containerPort\": 8000, \"hostPort\": 8000, \"protocol\": \"tcp\" }]
            }]" --query 'taskDefinition.taskDefinitionArn' --output text)

          echo "BACKEND_TASK=$BACKEND_TASK" >> $GITHUB_ENV
          echo "ADMIN_TASK=$ADMIN_TASK" >> $GITHUB_ENV
          echo "STOREFRONT_TASK=$STOREFRONT_TASK" >> $GITHUB_ENV

      - name: Deploy Services
        run: |
          for svc in backend admin storefront; do
            SERVICE_NAME="${svc}-service"
            TASK_DEF_VAR="$(echo $svc | tr a-z A-Z)_TASK"

            SERVICE_EXISTS=$(aws ecs describe-services \
              --cluster $ECS_CLUSTER \
              --services ${SERVICE_NAME} \
              --query "failures[?reason=='MISSING']" \
              --output text)

            if [[ -n "$SERVICE_EXISTS" ]]; then
              echo "Creating $SERVICE_NAME..."
              aws ecs create-service \
                --cluster $ECS_CLUSTER \
                --service-name ${SERVICE_NAME} \
                --task-definition ${!TASK_DEF_VAR} \
                --launch-type FARGATE \
                --desired-count 1 \
                --network-configuration "awsvpcConfiguration={subnets=[${SUBNETS}],securityGroups=[${SECURITY_GROUP}],assignPublicIp=ENABLED}" \
                --region $AWS_REGION
            else
              echo "Updating $SERVICE_NAME..."
              aws ecs update-service \
                --cluster $ECS_CLUSTER \
                --service ${SERVICE_NAME} \
                --task-definition ${!TASK_DEF_VAR} \
                --force-new-deployment \
                --region $AWS_REGION
            fi
          done
