name: Deploy to ECS Fargate

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 739275478105.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPO_BACKEND: backend
  ECR_REPO_ADMIN: admin
  ECR_REPO_STOREFRONT: storefront
  ECS_CLUSTER: medusa-cluster
  ECS_SERVICE_BACKEND: backend-service
  ECS_SERVICE_ADMIN: admin-service
  ECS_SERVICE_STOREFRONT: storefront-service
  SUBNETS: subnet-04fd156206a709997,subnet-0eb5ce8c43716be97,subnet-0458b373ada72ad8e,subnet-00bedb1932d937f7b
  SECURITY_GROUP: medusa-ecs-service-sg

jobs:
  deploy:
    name: Build & Deploy Containers
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::739275478105:role/github-actions-ecs-deploy-role
          role-session-name: github-actions-session
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push Backend Image
        run: |
          docker build -t $ECR_REPO_BACKEND ./backend
          docker tag $ECR_REPO_BACKEND:latest $ECR_REGISTRY/$ECR_REPO_BACKEND:latest
          docker push $ECR_REGISTRY/$ECR_REPO_BACKEND:latest

      - name: Build & Push Admin Image
        run: |
          docker build -t $ECR_REPO_ADMIN ./admin
          docker tag $ECR_REPO_ADMIN:latest $ECR_REGISTRY/$ECR_REPO_ADMIN:latest
          docker push $ECR_REGISTRY/$ECR_REPO_ADMIN:latest

      - name: Build & Push Storefront Image
        run: |
          docker build -t $ECR_REPO_STOREFRONT ./storefront
          docker tag $ECR_REPO_STOREFRONT:latest $ECR_REGISTRY/$ECR_REPO_STOREFRONT:latest
          docker push $ECR_REGISTRY/$ECR_REPO_STOREFRONT:latest

      - name: Deploy Backend Service
        run: |
          aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_BACKEND \
            --region $AWS_REGION | grep "MISSING" && \
          aws ecs create-service \
            --cluster $ECS_CLUSTER \
            --service-name $ECS_SERVICE_BACKEND \
            --task-definition backend-task-def \
            --launch-type FARGATE \
            --desired-count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ env.SUBNETS }}],securityGroups=[${{ env.SECURITY_GROUP }}],assignPublicIp=ENABLED}" \
            --region $AWS_REGION || \
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_BACKEND \
            --force-new-deployment \
            --region $AWS_REGION

      - name: Deploy Admin Service
        run: |
          aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_ADMIN \
            --region $AWS_REGION | grep "MISSING" && \
          aws ecs create-service \
            --cluster $ECS_CLUSTER \
            --service-name $ECS_SERVICE_ADMIN \
            --task-definition admin-task-def \
            --launch-type FARGATE \
            --desired-count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ env.SUBNETS }}],securityGroups=[${{ env.SECURITY_GROUP }}],assignPublicIp=ENABLED}" \
            --region $AWS_REGION || \
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_ADMIN \
            --force-new-deployment \
            --region $AWS_REGION

      - name: Deploy Storefront Service
        run: |
          aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_STOREFRONT \
            --region $AWS_REGION | grep "MISSING" && \
          aws ecs create-service \
            --cluster $ECS_CLUSTER \
            --service-name $ECS_SERVICE_STOREFRONT \
            --task-definition storefront-task-def \
            --launch-type FARGATE \
            --desired-count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ env.SUBNETS }}],securityGroups=[${{ env.SECURITY_GROUP }}],assignPublicIp=ENABLED}" \
            --region $AWS_REGION || \
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_STOREFRONT \
            --force-new-deployment \
            --region $AWS_REGION
